Rituals in information system design and development
leave a comment »
Introduction
Information system development is generally viewed as a rational process involving steps such as planning, requirements gathering, design etc. However, since it often involves many people, it is only natural that the process will have social and political dimensions as well.
The rational elements of the development process focus on matters such as analysis, coding and adherence to guidelines etc. On the other hand, the socio-political aspects are about things such as differences of opinion, conflict, organisational turf wars etc.  The interesting thing, however, is that elements that appear to be rational are sometimes subverted to achieve political ends. Shorn of their original intent, they become ritualsthat are performed for symbolic reasons rather than rational ones. In this paper I discuss rituals in system development, drawing on a paper by Daniel Robey and Lynne Markus entitled, Rituals in Information System Design .
Background
According to the authors, labelling the process of system design and development as rational implies that the  process can be set out and explained in a logical way. Moreover,  it also implies that the system being designed has clear goals that can be defined upfront, and that the implemented system will be used in the manner intended by the designers. On the other hand, a political perspective would emphasise the differences between various stakeholder groups (e.g. users, sponsors and developers) and how each group uses the process in ways that benefit them, sometimes to the detriment of others.
In the paper the authors discuss how  the following two elements of the system development process are consistent with both views summarised above.
1.	System development lifecycle.
2.	Techniques for user involvement
I’ll look at each of these in turn in the next two sections, emphasising their rational features.
Development lifecycle
The basic steps of a system development lifecycle, common to all methodologies, are:
1.	Inception
2.	Requirements gathering  / analysis
3.	Specification
4.	Design
5.	Programming
6.	Testing
7.	Training
8.	Rollout
Waterfall methodologies run through each of the above once whereas Iterative/Incremental methods loop through (a subset of) them as many times as needed.
It is easy to see that the lifecycle has a rational basis – specification depends on requirements and can therefore be done only after requirements have been gathered and analysis;  programming can only proceed after design in completed, and so on It all sounds very logical and rational. Moreover, for most mid-size or large teams, each of the above activities is carried out by different individuals – business analysts, architects/designers, programmers, testers, trainers and operations staff.  So the  advantage of following a formal development cycle is that it makes it easier to plan and coordinate large development efforts, at least in principle.
Techniques for user involvement
It is a truism that the success of a system depends critically on the level of user interest and engagement it generates. User involvement in different phases of system development  is therefore seen as a key to generating and maintaining user engagement.  Some of the common techniques to solicit user involvement include:
1.	Requirements analysis: Direct interaction with users is necessary in order to get a good understanding of their expectations from the system.  Another benefit is that it gives the project team an early opportunity to gain user engagement.
2.	Steering committees: Typically such committees are composed of key stakeholders from each group that  is affected by the system. Although some question the utility of steering committees, it is true that committees that consist of high ranking executives can help in driving user engagement.
3.	Prototyping:  This involves creating a working model that serves to demonstrate a subset of the full functionality of the system.  The great advantage of this method of user involvement that it gives users an opportunity to provide feedback early in the development lifecycle.
Again, it is easy to see that the above techniques have a rational basis: the logic being  that  involving  users early in the development process  helps them become familiar with the system, thus improving the chances that they will be willing, even enthusiastic adopters of the system when it is rolled out.
The political players
Politics is inevitable in any social system that has  stakeholder groups with differing interests.  In the case of system development, two important stakeholder groups are users and developers.  Among other things, the two groups differ in:
1.	Cognitive style: developers tend to be analytical/logical types while users come from a broad spectrum of cognitive types. Yes, this is a generalisation, but it is largely true.
2.	Position in organisation: in a corporate environment, business users generally outrank technical staff.
3.	Affiliations: users and developers belong to different organisational units and therefore have differing loyalties.
4.	Incentives: Typically member of the two groups have different  goals. The developers may be measured by the success of the rollout whereas users may be judged by their proficiency on the new system and the resulting gains in productivity. 
These lead to differences in ways the two groups perceive processes or events. For example, a developer may see a specification as a blueprint for design  whereas a user might see it as a bureaucratic document that locks them into choices they are ill equipped to make. Such differences in perceptions make it far from obvious that the different parties can converge on a common worldview that is assumed by the rational perspective. Indeed, in such situations it isn’t clear at all as to what constitutes “common interest.” Indeed, it is such differences that lead to the ritualisation of aspects of the systems development process.
Ritualisation of rational processes
We now look at how the differences in perspectives can lead to a situation where processes that are intended to be rational end up becoming rituals.
Let’s begin with an example that occurs at the inception phase of system development project: the formulation of a business case. The stated intent of a business case is to make a rational argument as to why a particular system should be built. Ideally it should be created jointly by the business and technology departments.  In practice, however, it frequently happens that one of the two parties  is given primary responsibility for it.  As the two parties are not equally represented, the business case ends up becoming a political document:  instead of presenting a balanced case, it presents a distorted view that focuses on one party’s needs. When this happens, the business case becomes symbol rather than substance – in other words, a ritual.
Another example is the handover process between developers and users (or operations, for that matter). The process is intended to ensure that the system does indeed function as promised in the scope document.  Sometimes though, both parties attempt to safeguard their own interests:  developers may pressure users to sign off whereas users may delay signing-off because they want to check the system ever more thoroughly.  In such situations the handover process  serves as a forum for both parties to argue their positions rather than as a means to move  the project  to a close.  Once again, the actual process is shorn of its original intent and meaning, and is thus ritualised.
Even steering committees can end up being ritualised.  For example, when a committee consists of senior executives from different divisions, it can happen that each member will attempt to safeguard the interests of his or her fief.  Committee meetings then become forums to bicker rather than to provide direction to the project.  In other words, they become symbolic events that achieve little of substance.
Discussion
The main conclusion from the above argument is that information system design and implementation is both a rational and political process.  As a consequence, many of the processes associated with it turn out to be more like rituals in that they symbolise rationality but are not actually rational at all.
That said, it should be noted that rituals have an important function:  they serve to give the whole process of systems development a veneer of rationality whilst allowing for the  political manouevering that is inevitable in large projects.  As the authors put it:
Rituals in systems development function to maintain the appearance of rationality in systems development and in organisational decision making. Regardless of whether it actually produces rational outcomes or not, systems development must symbolize rationality and signify that the actions taken are not arbitrary but rather acceptable within the organisation’s ideology. As such, rituals help provide meaning to the actions taken within an organisation
And I feel compelled to add:  even if the actions taken are completely irrational and arbitrary…
Summary…and a speculation
In my experience, the central message of the paper rings true:  systems development and design, like many other organisational processes and procedures, are often hijacked by different parties to suit their own ends.  In such situations, processes are reduced to rituals that maintain a facade of rationality whilst providing cover for politicking and other not-so-rational actions.
Finally, it is interesting to note that the problem of ritualisation is a rather general one: many allegedly rational processes in organisations are more symbol than substance.  Examples of other processes that are prone to ritualisation include performance management, project management and planning. This hints at a deeper issue, one that I think has its origins in modern management’s penchant for overly prescriptive, formulaic approaches to managing organisations and initiatives. That, however, remains a speculation and a topic for another time…
